clear;

allData = imageDatastore('trainColours\','IncludeSubfolders',true,'LabelSource','foldernames');
[trainingImages, testingImages] = splitEachLabel(allData, 0.8, 'randomized');

%load in pre-trained CNN, 'Squeezenet'
squeeze = squeezenet;
analyzeNetwork(squeeze);

networkArchitecture = layerGraph(squeeze);
numberOfClasses = numel(categories(trainingImages.Labels));

New_Convolutional_Layer = convolution2dLayer([1,1], numberOfClasses,...
    'WeightLearnRateFactor', 10, ...
    'BiasLearnRateFactor', 10, ...
    'Name', 'Iris Feature Extractor');

New_Classification_Layer = classificationLayer('Name', 'Iris Classifier');

mySqueeze = replaceLayer(networkArchitecture, 'conv10', New_Convolutional_Layer);
mySqueeze = replaceLayer(mySqueeze, 'ClassificationLayer_predictions', New_Classification_Layer);

options = trainingOptions('sgdm', ...
    'InitialLearnRate', 0.001, ...
    'MiniBatchSize', 4, ...
    'MaxEpochs', 10, ...
    'Shuffle', 'every-epoch', ...
    'ValidationData',testingImages, ...
    'ValidationFrequency', 3, ...
    'Verbose', false, ...
    'Plots', 'training-progress');

retrainedSqueeze = trainNetwork(trainingImages, mySqueeze, options);
